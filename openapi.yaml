security:
  - HTTPCookie: []
components:
  parameters:
    descriptionRequired:
      name: description
      in: query
      required: true
      description: Title of the record in the CoMET database
      schema:
        type: string
    description:
      name: description
      in: query
      description: Title of the record in the CoMET database
      schema:
        type: string
    editState:
      name: editState
      in: query
      description: Status of record.
      schema:
        type: string
        enum:
          - DRAFT
          - COMPLETED
          - PUBLISH
          - PUBLISH_PROCESSING
          - IN_REVIEW
          - APPROVED
          - UNPUBLISHED
          - UNRESOLVED
          - INVALID
        example:
          - APPROVED
    format:
      name: format
      in: query
      description: 'Response format. This parameter does not change the format of metadata documents/data. Use the transform parameter instead'
      schema:
        type: string
        enum:
          - xml
          - json
          - text
        example:
          - xml
    max:
      name: max
      in: query
      description: 'Maximum number of records to return'
      schema:
        type: integer
        minimum: 1
        maximum: 10000
        default: 5000
        example:
          - 50
    offset:
      name: offset
      in: query
      description: 'Number of records to exclude from the responses first N items. Use with max to request a set of items. Offset is applied before the max parameter regardless of its position in the request. '
      schema:
        type: integer
        minimum: 1
        maximum: 5000
        default: 1
        example:
          - 50
    recordGroupRequired:
      name: recordGroup
      in: query
      description: 'The record group, which may represent a Web Accessible Folder (WAF) that contains 1 or more ISO metadata records stored in CoMET. If your record group name includes reserved, unsafe, or other characters not suppported in URLs; they will need to be encoded. For example, a record group with the name My/Record/Group/, would need to be encoded as My%2FRecord%2FGroup%2F'
      required: true
      schema:
        type: string
        example: Comet%20Training
    since:
      name: since
      in: query
      description: Return metadata records updated since this date. Requires yyyy-MM-dd format
      schema:
        type: string
        format: date
        pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
        example: 2022-01-01
    transformImport:
      name: transform
      in: query
      description: Type of transformation to apply to the metadata record. Please review the section title Transformations for more detail.
      required: true
      schema:
        type: string
        enum:
          - convert-iso19115-2-to-comet
        example: convert-iso19115-2-to-comet
    transformExport:
      name: transform
      in: query
      description: Type of transformation to apply to the metadata record. Please review the section title Transformations for more detail.
      schema:
        type: string
        enum:
          - convert-comet-to-iso19115-2
          - convert-iso19115-2-to-landingPage
          - convert-iso19115-2-to-text
          - convert-iso19115-2-to-rubricV2
          - convert-iso19115-2-to-cswRubric
          - convert-iso19115-2-to-doiRubric
          - convert-iso19115-2-to-components
        example: convert-comet-to-iso19115-2
    transformValidate:
      name: transform
      in: query
      description: Type of transformation to apply to the metadata record. Please review the section title Transformations for more detail.
      required: true
      schema:
        type: string
        enum:
          - convert-comet-to-iso19115-2
        example: ?transform=convert-comet-to-iso19115-2
    uuid:
      name: uuid
      in: query
      description: 'Universally Unique Identifier. For import, Use this query parameter if you create your own UUIDs. Otherwise, the system will generate one for you. '
      schema:
        type: string
    uuidInPath:
      name: uuid
      in: path
      description: 'Universally Unique Identifier. Use this query parameter if you create your own UUIDs. Otherwise, the system will generate one for you. '
      required: true
      schema:
        type: string
  schemas:
    credentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    cometFormat:
      type: object
      description: Standard agonsitc CoMET format. This is the format that is stored in the CoMET database.
      properties:
        formModel:
          type: object
          properties:
            identification:
              type: object
            keywords:
              type: object
            coverage:
              type: object
            metadata:
              type: object
            access:
              type: object
            content:
              type: object
            history:
              type: object
            quality:
              type: object
            resources:
              type: object
            orphan:
              type: object
            dataManagementPlan:
              type: object
            dsmq:
              type: object
    iso19115-2:
      type: object
      description: ISO 19115-2 Standard
      properties:
        gmi:MI_Metadata:
          type: object  
    createMetadataResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        uuid:
          type: string
      xml:
        name: createMetadataResponse
        wrapped: true
    deleteMetadataResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
      xml:
        name: deleteMetadataResponse
        wrapped: true
    exportMetaResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
      xml:
        name: exportMetaResponse
        wrapped: true
    searchMetadataResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        totalCount:
          type: string
        metadata:
          items:
            type: object
            properties:
              fileIdentifier:
                type: string
              name:
                type: string
              uuid:
                type: string
            xml:
              name: metadata
              wrapped: true
      xml:
        name: searchMetadataResponse
        wrapped: true
    transformFailed:
      example:
        message: Transformed Failure! {additional message}
        status: 400
      xml:
        name: createMetadataResponse
        wrapped: true
    updateMetadataResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        uuid:
          type: string
      xml:
        name: updateMetadataResponse
        wrapped: true
    validateMetadataResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
      xml:
        name: validateMetadataResponse
        wrapped: true
  securitySchemes:
    HTTPCookie:
      type: apiKey
      in: cookie
      name: JSESSIONID
servers:
  - description: Production server URL
    url: https://data.noaa.gov/cedit
openapi: 3.0.0
paths:
  /login/wsLogin:
    post:
      tags:
        - Login
      summary: Login
      security: []
      operationId: login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/credentials'
      responses:
        '201':
          description: Success
        '403':
          description: Bad credentials
      x-codeSamples:
        - lang: cURL
          label: cURL
          source: |
            # This script saves your apiKey (JSESSIONID) to a cookie file on disk. This file, cookie.txt, is sent in other examples in this documentation 
            
            curl -X 'POST' \
            'https://data.noaa.gov/cedit/login/wsLogin' \
            -H 'accept: */*' \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -d 'username=your.username' -d 'password=yourPassword'  \
            --cookie-jar cookies.txt
        - lang: python
          label: python
          source: |
            import requests
            import getpass
            import json
            
            # Makes a persistent Session - Will save to disk
            session = requests.Session()
            
            LOGIN_URL = "https://data.noaa.gov/cedit/login/wsLogin"
            username = input("Enter Username: ")
            password = getpass.getpass(prompt='Enter password: ')
            
            PARAMS = {'username': username, 'password': password}
            
            resp = session.post(LOGIN_URL, params = PARAMS)
            
            print(resp.text)
            
            # Saves Session to disk for use in other python examples
            if resp.text == "success": 
                print(session.cookies)
            
                with open('comet_cookie.txt', 'w') as f:
                    json.dump(requests.utils.dict_from_cookiejar(session.cookies), f)
            else:
                print("login failed")
  /metadata/import:
    post:
      tags:
        - Metadata Operations
      summary: Create/Import
      description: Create or import an ISO metadata file into CoMET. The default data expect is CoMET Format XML. To import ISO 19115-2 XML use the transform query parameter.
      operationId: create
      requestBody:
        description: Accepts XML document in Comet Format XML or ISO 19915-2 XML. Default Comet Format XML. To change, use the transform parameter
        required: true
        content:
          application/xml:
            schema:
              oneOf:
                - $ref: '#/components/schemas/cometFormat'
                - $ref: '#/components/schemas/iso19115-2'
            examples:
                sampleNceiTemplate:
                  summary: Sample ISO 19115-2
                  externalValue: 'https://data.noaa.gov/waf/templates/iso/xml/ncei_template-clean.xml'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createMetadataResponse'
              example:
                message: success
                status: 200
                uuid: 1d2b290b-abe9-479b-8179-a5dd819bdf90
            application/xml:
              schema:
                $ref: '#/components/schemas/createMetadataResponse'
              example:
                message: success
                status: 200
                uuid: 1d2b290b-abe9-479b-8179-a5dd819bdf90
            text/plain:
              schema:
                type: string
              example: |
                message: success
                status: 200
                uuid: 1d2b290b-abe9-479b-8179-a5dd819bdf90
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createMetadataResponse'
              examples:
                duplicateUUID:
                  value: 
                    message: 'Validation error: unable to create a record: Property ... of class ... with value {supplied UUID} must be unique'
                    status: 400
                    uuid:
                badXML:
                  value: 
                    message: 'XSD validation for theInstance failed: {additional message}'
                    status: 400
                    uuid:
                badParameter:
                  value: 
                    message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'
                    status: 400
                    uuid:
            application/xml:
              schema:
                $ref: '#/components/schemas/createMetadataResponse'
              examples:
                duplicateUUID:
                  value: 
                    message: 'Validation error: unable to create a record: Property ... of class ... with value {supplied UUID} must be unique'
                    status: 400
                    uuid:
                badXML:
                  value: 
                    message: 'XSD validation for theInstance failed: {additional message}'
                    status: 400
                    uuid:
                badParameter:
                  value: 
                    message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'
                    status: 400
                    uuid:      
            text/plain:
              schema:
                $ref: '#/components/schemas/createMetadataResponse'
              examples:
                duplicateUUID:
                  value: |
                    message: 'Validation error: unable to create a record: Property ... of class ... with value {supplied UUID} must be unique'
                    status: 400
                    uuid:
                badXML:
                  value: |
                    message: 'XSD validation for theInstance failed: {additional message}'
                    status: 400
                    uuid:
                badParameter:
                  value: |
                    message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'
                    status: 400
                    uuid:              
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createMetadataResponse'
              examples:
                transformParameterBad:
                  value: 
                    message: 'Unable to find view {requested transform}'
                    status: 404
                    uuid:
            application/xml:
              schema:
                $ref: '#/components/schemas/createMetadataResponse'
              examples:
                transformParameterBad:
                  value: 
                    message: 'Unable to find view {requested transform}'
                    status: 404
                    uuid:
            text/plain:
              schema:
                $ref: '#/components/schemas/createMetadataResponse'
              examples:
                transformParameterBad:
                  value: |
                    message: 'Unable to find view {requested transform}'
                    status: 404
                    uuid:  
        '500':
          description: Unexpected Error 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createMetadataResponse'
              examples:
                invalidUUID:
                  value: 
                    message: 'Content user provided UUID does not validate...'
                    status: 500
                    uuid:
                duplicateFileIdentifer:
                  value: 
                    message: 'Upload Error: A metadata record with this FileIdentifier already exists within CoMET. Either call the update API or change the FileIdentifier.'
                    status: 500
                    uuid:
            application/xml:
              schema:
                $ref: '#/components/schemas/createMetadataResponse'
              examples:
                invalidUUID:
                  value: 
                    message: 'Content user provided UUID does not validate...'
                    status: 500
                    uuid:
                duplicateFileIdentifer:
                  value: 
                    message: 'Upload Error: A metadata record with this FileIdentifier already exists within CoMET. Either call the update API or change the FileIdentifier.'
                    status: 500
                    uuid:
            text/plain:
              schema:
                $ref: '#/components/schemas/createMetadataResponse'
              examples:
                invalidUUID:
                  value: |
                    message: 'Content user provided UUID does not validate...'
                    status: 500
                    uuid:
                duplicateFileIdentifer:
                  value: |
                    message: 'Upload Error: A metadata record with this FileIdentifier already exists within CoMET. Either call the update API or change the FileIdentifier.'
                    status: 500
                    uuid:
      parameters:
        - $ref: '#/components/parameters/recordGroupRequired'
        - $ref: '#/components/parameters/descriptionRequired'
        - $ref: '#/components/parameters/transformImport'
        - $ref: '#/components/parameters/uuid'
        - $ref: '#/components/parameters/editState'
        - $ref: '#/components/parameters/format'
      x-codeSamples:
        - lang: cURL
          label: cURL Import ISO 19115-2
          source: |
            curl -v -X 'POST' \
              'https://data.noaa.gov/cedit/metadata/import?recordGroup={Your Record Group}&transform=convert-iso19115-2-to-comet&description={Your Record Name}&format=json' \
              -H 'accept:  */*' \
              -H 'Content-Type: application/xml' \
              -d @{Your File Name} \
              --cookie cookies.txt
        - lang: python
          label: python
          source: |
            import requests
            import json
            from urllib.parse import urlparse
            from sys import exit
            from os.path import exists
            
            SEARCH_URL = "https://data.noaa.gov/cedit/metadata/search"
            
            # if cookie can't be found, exit
            file_exists = exists('comet_cookie.txt')
            if not file_exists:
                print("Can't find cookie, please login")
                exit(0)
            
            # Create a session and update it with your jsessionid saved in comet_cookie.txt
            session = requests.Session()
            with open('comet_cookie.txt', 'r') as f:
                cookies = requests.utils.cookiejar_from_dict(json.load(f))
                session.cookies.update(cookies)
            
            recordGroup = input("Enter Record Group Name: ")
            responseFormat = input("Enter a response format (text, json, or xml): ")
            
            PARAMS = {
                'recordGroup': recordGroup, 
                'format': responseFormat
            }
            
            resp = session.get(SEARCH_URL, params = PARAMS)
            
            domain = urlparse(resp.url).netloc
            
            if "auth" in domain:
                print("Your session expired...please login")
            else:
                print(resp.status_code)
                print(resp.text)
  /metadata/{uuid}:
    get:
      tags:
        - Metadata Operations
      summary: Read/Export
      description: Read/Export Metadata. The default schema returned is CoMET Format XML. To return ISO 19115-2 XML document, you must use transform query parameter. Other document and reports exports are support by using the transform parameter.
      operationId: export
      responses:
        '200':
          description: Success
          content:
            application/xml:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/cometFormat'
                  - $ref: '#/components/schemas/iso19115-2'
              examples:
                sampleNceiTemplate:
                  summary: Sample ISO 19115-2
                  externalValue: 'https://data.noaa.gov/waf/templates/iso/xml/ncei_template-clean.xml'
        '400':
          description: Bad Request
          content:
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
                xml:
                  name: exportMetaResponse
                  wrapped: true
              example:
                message: Transformed Failure! {additional message}
                status: 400
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/exportMetaResponse'
                  - $ref: '#/components/schemas/transformFailed'
            text/plain:
              schema:
                type: string
              example: |
                status: 400
                message: Transform failure! {additional message}
        '404':
          description: Not Found
          content:
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/exportMetaResponse'
                  - type: object
                  - example:
                      message: Unable to find record
                      status: 404
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/exportMetaResponse'
                  - type: object
                  - example:
                      message: Unable to find record
                      status: 404
            text/plain:
              schema:
                type: string
                example: |
                  status: 404
                  message: Unable to find record
      parameters:
        - $ref: '#/components/parameters/uuidInPath'
        - $ref: '#/components/parameters/transformExport'
        - $ref: '#/components/parameters/format'
      x-codeSamples:
        - lang: cURL
          label: cURL 
          source: curl --cookie cookies.txt "https://data.noaa.gov/cedit/metadata/{your uuid}" > {your fileName}.xml
        - lang: cURL
          label: cURL with Transform
          source:  curl --cookie cookies.txt "https://data.noaa.gov/cedit/metadata/{your uuid}?transform={your transform}" > {your file name}
        - lang: python
          label: python
          source:  |
              import requests
              import json
              from urllib.parse import urlparse
              from sys import exit
              from os.path import exists
              
              EXPORT_URL = "https://data.noaa.gov/cedit/metadata/"
              
              # if cookie can't be found, exit
              file_exists = exists('comet_cookie.txt')
              if not file_exists:
                  print("Can't find cookie, please login")
                  exit(0)
              
              # Create a session and update it with your jsessionid saved in comet_cookie.txt
              session = requests.Session()
              with open('comet_cookie.txt', 'r') as f:
                  cookies = requests.utils.cookiejar_from_dict(json.load(f))
                  session.cookies.update(cookies)
              
              uuid = input("Enter UUID of record to export: ")
              filename = input("Save file with this name: ")
              
              PARAMS = {
                  'transform': 'convert-comet-to-iso19115-2',
                  'format': "json"
              }
              
              resp = session.get(EXPORT_URL+uuid, params=PARAMS)
              
              domain = urlparse(resp.url).netloc
              
              if "auth" in domain:
                  print("Your session expired...please login")
              else:
                  print(resp.status_code)
                  if resp.status_code == 200:
                      with open(filename, 'wb') as f:
                          f.write(resp.content)
                  else:
                      print(resp.text)
    delete:
      tags:
        - Metadata Operations
      summary: Delete
      security:
        - HTTPCookie: []
      description: Delete Metadata record
      operationId: delete
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteMetadataResponse'
              example:
                  message: success
                  status: 200
            application/xml:
              schema:
                $ref: '#/components/schemas/deleteMetadataResponse'
              example:
                message: success
                status: 200
            text/plain:
              schema:
                type: string
                example: |
                  status: 200
                  message: success
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/deleteMetadataResponse'
                  - type: object
                  - example:
                      message: Unable to find record
                      status: 404
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/deleteMetadataResponse'
                  - type: object
                  - example:
                      message: Unable to find record
                      status: 404
            text/plain:
              schema:
                type: string
                example: |
                  status: 404
                  message: Unable to find record
      parameters:
        - $ref: '#/components/parameters/uuidInPath'
        - $ref: '#/components/parameters/format'
      x-codeSamples:
        - lang: cURL
          label: cURL 
          source: curl --cookie cookies.txt -X DELETE "https://data.noaa.gov/cedit/metadata/{your uuid}"  
        - lang: python
          label: python
          source: |
            import requests
            import json
            from urllib.parse import urlparse
            from sys import exit
            from os.path import exists
            
            DELETE_URL = "https://data.noaa.gov/cedit/metadata/"
            
            # if cookie can't be found, exit
            file_exists = exists('comet_cookie.txt')
            if not file_exists:
                print("Can't find cookie, please login")
                exit(0)
            
            # Create a session and update it with your jsessionid saved in comet_cookie.txt
            session = requests.Session()
            with open('comet_cookie.txt', 'r') as f:
                cookies = requests.utils.cookiejar_from_dict(json.load(f))
                session.cookies.update(cookies)
            
            uuid = input("Enter UUID of record to delete: ")
            responseFormat = input("Enter a response format (text, json, or xml): ")
            
            PARAMS = {
                'format': responseFormat
            }
            
            resp = session.delete(DELETE_URL+uuid, params=PARAMS)
            
            domain = urlparse(resp.url).netloc
            
            if "auth" in domain:
                print("Your session expired...please login")
            else:
                print(resp.status_code)
                print(resp.text)
    put:
      tags:
        - Metadata Operations
      summary: Update
      security:
        - HTTPCookie: []
      description: ''
      operationId: update
      requestBody:
        description: Accepts XML document in Comet Format XML or ISO 19915-2 XML. Default Comet Format XML. To change, use the transform parameter
        required: true
        content:
          application/xml:
            schema:
              oneOf:
                - $ref: '#/components/schemas/cometFormat'
                - $ref: '#/components/schemas/iso19115-2'
            examples:
                sampleNceiTemplate:
                  summary: Sample ISO 19115-2
                  externalValue: 'https://data.noaa.gov/waf/templates/iso/xml/ncei_template-clean.xml'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateMetadataResponse'
              example:
                message: success
                status: 200
                uuid: 1d2b290b-abe9-479b-8179-a5dd819bdf90
            application/xml:
              schema:
                $ref: '#/components/schemas/updateMetadataResponse'
              example:
                message: success
                status: 200
                uuid: 1d2b290b-abe9-479b-8179-a5dd819bdf90
            text/plain:
              schema:
                type: string
              example: |
                message: success
                status: 200
                uuid: 1d2b290b-abe9-479b-8179-a5dd819bdf90
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateMetadataResponse'
              examples:
                noFileSent:
                  value: 
                    message: '{additional message} Premature end of file.'
                    status: 400
                    uuid: cc9efa76-b2ba-4810-8052-2337abdf6c09
                badXML:
                  value: 
                    message: 'XSD validation for theInstance failed: {additional message}'
                    status: 400
                    uuid: cc9efa76-b2ba-4810-8052-2337abdf6c09
                badParameter:
                  value: 
                    message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'
                    status: 400
                    uuid: cc9efa76-b2ba-4810-8052-2337abdf6c09
            application/xml:
              schema:
                $ref: '#/components/schemas/createMetadataResponse'
              examples:
                noFileSent:
                  value: 
                    message: '{additional message} Premature end of file.'
                    status: 400
                    uuid: cc9efa76-b2ba-4810-8052-2337abdf6c09
                badXML:
                  value: 
                    message: 'XSD validation for theInstance failed: {additional message}'
                    status: 400
                    uuid: cc9efa76-b2ba-4810-8052-2337abdf6c09
                badParameter:
                  value: 
                    message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'
                    status: 400
                    uuid: cc9efa76-b2ba-4810-8052-2337abdf6c09
            text/plain:
              schema:
                $ref: '#/components/schemas/createMetadataResponse'
              examples:
                noFileSent:
                  value: |
                    message: '{additional message} Premature end of file.'
                    status: 400
                    uuid: cc9efa76-b2ba-4810-8052-2337abdf6c09
                badXML:
                  value: |
                    message: 'XSD validation for theInstance failed: {additional message}'
                    status: 400
                    uuid: cc9efa76-b2ba-4810-8052-2337abdf6c09
                badParameter:
                  value: |
                    message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'
                    status: 400
                    uuid: cc9efa76-b2ba-4810-8052-2337abdf6c09
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateMetadataResponse'
              examples:
                transformParameterBad:
                  value: 
                    message: 'Unable to find view {requested transform}'
                    status: 404
                    uuid: cc9efa76-b2ba-4810-8052-2337abdf6c09
            application/xml:
              schema:
                $ref: '#/components/schemas/updateMetadataResponse'
              examples:
                transformParameterBad:
                  value: 
                    message: 'Unable to find view {requested transform}'
                    status: 404
                    uuid: cc9efa76-b2ba-4810-8052-2337abdf6c09
            text/plain:
              schema:
                $ref: '#/components/schemas/updateMetadataResponse'
              examples:
                transformParameterBad:
                  value: |
                    message: 'Unable to find view {requested transform}'
                    status: 404
                    uuid: cc9efa76-b2ba-4810-8052-2337abdf6c09
        '500':
          description: Unexpected Error 
      parameters:
        - $ref: '#/components/parameters/uuidInPath'
        - $ref: '#/components/parameters/description'
        - $ref: '#/components/parameters/transformImport'
        - $ref: '#/components/parameters/editState'
        - $ref: '#/components/parameters/format'
      x-codeSamples:
        - lang: cURL
          label: cURL Update ISO 19115-2
          source: |
            curl -X 'PUT' \
              'https://data.noaa.gov/cedit/metadata/{your uuid}?transform=convert-iso19115-2-to-comet&format=json' \
              -H "Content-Type: application/xml" \
              -d @{your file} \
              -H 'accept: */*' \
              --cookie cookies.txt
        - lang: cURL
          label: cURL APPROVE/Publish Record
          source: |
            curl -X 'PUT' \
              'https://data.noaa.gov/cedit/metadata/{your uuid}?transform=convert-iso19115-2-to-comet&editState=APPROVE&format=json' \
              -H "Content-Type: application/xml" \
              -d @{your file} \
              -H 'accept: */*' \
              --cookie cookies.txt
        - lang: python
          label: python
          source: |
            import requests
            import json
            from urllib.parse import urlparse
            from sys import exit
            from os.path import exists
            
            UPDATE_URL = "https://data.noaa.gov/cedit/metadata/"
            
            # if cookie can't be found, exit
            file_exists = exists('comet_cookie.txt')
            if not file_exists:
                print("Can't find cookie, please login")
                exit(0)
            
            filename = input("Enter the filename (including path if located in a different directory): ")
            
            # if the file cannot be found, exit
            file_exists = exists(filename)
            if not file_exists:
                print("Could not locate the file")
                exit(0)
            
            # Create a session and update it with your jsessionid saved in comet_cookie.txt
            session = requests.Session()
            with open('comet_cookie.txt', 'r') as f:
                cookies = requests.utils.cookiejar_from_dict(json.load(f))
                session.cookies.update(cookies)
            
            uuid = input("Enter UUID of record to update: ")
            editState = input("Enter an edit state (DRAFT and APPROVED are common examples): ")
            responseFormat = input("Enter a response format (text, json, or xml): ")
            
            PARAMS = {
                'transform': 'convert-iso19115-2-to-comet',
                'editState':  editState,
                'format': responseFormat
            }
            
            headers = {'Content-Type': 'application/xml'}
            
            with open(filename, 'rb') as f:
                resp = session.put(UPDATE_URL+uuid, headers=headers, params=PARAMS, data = f)
                
            domain = urlparse(resp.url).netloc
            
            if "auth" in domain:
                print("Your session expired...please login")
            else:
                print(resp.status_code)
                print(resp.text)
  /metadata/search:
    get:
      tags:
        - Metadata Operations
      summary: Search
      security:
        - HTTPCookie: []
      description: ''
      operationId: search
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchMetadataResponse'
              example:
                  message: success
                  status: 200
                  totalCount: 20
                  metadata: 
                    - fileIdentifer: gov.noaa.ncei:example_1
                      name: Example_1
                      uuid: 1aa2ac5c-bbff-4036-98fd-c477bf9c295b
                    - fileIdentifer: gov.noaa.ncei:example_2
                      name: Example_2
                      uuid: f0ba7fe9-0e9b-445b-b5d3-897b50aef656
            application/xml:
              schema:
                $ref: '#/components/schemas/searchMetadataResponse'
              example:
                  message: success
                  status: 200
                  totalCount: 20
                  metadata: 
                    - fileIdentifer: gov.noaa.ncei:example_1
                      name: Example_1
                      uuid: 1aa2ac5c-bbff-4036-98fd-c477bf9c295b
                    - fileIdentifer: gov.noaa.ncei:example_2
                      name: Example_2
                      uuid: f0ba7fe9-0e9b-445b-b5d3-897b50aef656
            text/plain:
              schema:
                type: string
                example: |
                  message: success
                  status: 200
                  totalCount: 20
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchMetadataResponse'
              examples:
                missingRecordGroup:
                  value: 
                    message: 'Validation of request failed: Property [recordGroup] of class ... cannot be null'
                    status: 400
                    totalCount: 0
                badParameter:
                  value: 
                    message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'
                    status: 400
                    totalCount: 0
            application/xml:
              schema:
                $ref: '#/components/schemas/searchMetadataResponse'
              examples:
                missingRecordGroup:
                  value: 
                    message: 'Validation of request failed: Property [recordGroup] of class ... cannot be null'
                    status: 400
                    totalCount: 0
                badParameter:
                  value: 
                    message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'
                    status: 400
                    totalCount: 0     
            text/plain:
              schema:
                $ref: '#/components/schemas/searchMetadataResponse'
              examples:
                missingRecordGroup:
                  value: |
                    message: 'Validation of request failed: Property [recordGroup] of class ... cannot be null'
                    status: 400
                    totalCount: 0
                badParameter:
                  value: |
                    message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'
                    status: 400
                    totalCount: 0         
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchMetadataResponse'
              examples:
                recordGroupNotFound:
                  value: 
                    message: 'Could not find record group'
                    status: 404
                    totalCount: 0  
            application/xml:
              schema:
                $ref: '#/components/schemas/searchMetadataResponse'
              examples:
                recordGroupNotFound:
                  value: 
                    message: 'Could not find record group'
                    status: 404
                    totalCount: 0  
            text/plain:
              schema:
                $ref: '#/components/schemas/searchMetadataResponse'
              examples:
                recordGroupNotFound:
                  value: |
                    message: 'Could not find record group'
                    status: 404
                    totalCount: 0             
        '500':
          description: Unexpected Error 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchMetadataResponse'
              examples:
                badURLConstruction:
                  value: 
                    message: 'For input string: {error message}'
                    status: 500
                    totalCount: 0
            application/xml:
              schema:
                $ref: '#/components/schemas/searchMetadataResponse'
              examples:
                badURLConstruction:
                  value: 
                    message: 'For input string: {error message}'
                    status: 500
                    totalCount: 0
            text/plain:
              schema:
                $ref: '#/components/schemas/searchMetadataResponse'
              examples:
                badURLConstruction:
                  value: |
                    message: 'For input string: {error message}'
                    status: 500
                    totalCount: 0
      parameters:
        - $ref: '#/components/parameters/recordGroupRequired'
        - $ref: '#/components/parameters/editState'
        - $ref: '#/components/parameters/format'
        - $ref: '#/components/parameters/max'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/since'
      x-codeSamples:
        - lang: cURL
          label: cURL 
          source: | 
            curl -G "https://data.noaa.gov/cedit/metadata/search?format=json"  \
              --data-urlencode "recordGroup={your record group}" \
              --cookie cookies.txt 
        - lang: cURL
          label: cURL with Encoded Vars
          source: | 
            var1=` echo -ne '{Your Record Group}' | xxd -plain | tr -d '\n' | sed 's/\(..\)/%\1/g'`;echo $enc
            var2=` echo -ne '{Title of Record}' | xxd -plain | tr -d '\n' | sed 's/\(..\)/%\1/g'`;echo $enc
            curl -X 'POST' \
              'https://data.noaa.gov/cedit/metadata/import?transform=convert-iso19115-2-to-comet&description=TEST_IMPORT&format=json&recordGroup='$var1'&otherVar='$var2 \
              -H 'Content-Type: application/xml' \
              --data-binary @import-test.xml \
              --cookie cookies.txt
        - lang: python
          label: python
          source: |
            import requests
            import json
            from urllib.parse import urlparse
            from sys import exit
            from os.path import exists
            
            SEARCH_URL = "https://data.noaa.gov/cedit/metadata/search"
            
            # if cookie can't be found, exit
            file_exists = exists('comet_cookie.txt')
            if not file_exists:
                print("Can't find cookie, please login")
                exit(0)
            
            # Create a session and update it with your jsessionid saved in comet_cookie.txt
            session = requests.Session()
            with open('comet_cookie.txt', 'r') as f:
                cookies = requests.utils.cookiejar_from_dict(json.load(f))
                session.cookies.update(cookies)
            
            recordGroup = input("Enter Record Group Name: ")
            responseFormat = input("Enter a response format (text, json, or xml): ")
            
            PARAMS = {
                'recordGroup': recordGroup, 
                'format': responseFormat
            }
            
            resp = session.get(SEARCH_URL, params = PARAMS)
            
            domain = urlparse(resp.url).netloc
            
            if "auth" in domain:
                print("Your session expired...please login")
            else:
                print(resp.status_code)
                print(resp.text)
  /metadata/validate/{uuid}:
    get:
      tags:
        - Metadata Operations
      summary: Validate
      description: Requires the transform parameter set to convert-comet-to-iso19115-2 to validate a record. (?transform=convert-comet-to-iso19115-2). Other transforms will return an error.
      security:
        - HTTPCookie: []
      operationId: validate
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              example:
                  message: success
                  status: 200
            application/xml:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              example:
                message: success
                status: 200
            text/plain:
              schema:
                type: string
                example: |
                  status: 200
                  message: success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              examples:
                badParameter:
                  value: 
                    message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'
                    status: 400
            application/xml:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              examples:
                badParameter:
                  value: 
                    message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'
                    status: 400
            text/plain:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              examples:
                badParameter:
                  value: |
                    message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'
                    status: 400
        '404':
          description: Not Found 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              examples:
                cantFindRecord:
                  value: 
                    message: 'Unable to find record'
                    status: 404
                noXSD:
                  value: 
                    message: 'No XSD location found in the XML document.'
                    status: 404
                transformParameterBad:
                  value: 
                    message: 'Unable to find view {requested transform}'
                    status: 404
            application/xml:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              examples:
                cantFindRecord:
                  value: 
                    message: 'Unable to find record'
                    status: 404
                noXSD:
                  value: 
                    message: 'No XSD location found in the XML document.'
                    status: 404
                transformParameterBad:
                  value: 
                    message: 'Unable to find view {requested transform}'
                    status: 404
            text/plain:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              examples:
                cantFindRecord:
                  value: |
                    message: 'Unable to find record'
                    status: 404
                noXSD:
                  value: |
                    message: 'No XSD location found in the XML document.'
                    status: 404
                transformParameterBad:
                  value: |
                    message: 'Unable to find view {requested transform}'
                    status: 404
        '417':
          description: Expectation Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              examples:
                validationFailed:
                  value: 
                    message: '{validation failure message}'
                    status: 417
            application/xml:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              examples:
                badParameter:
                  value: 
                    message: '{validation failure message}'
                    status: 417
            text/plain:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              examples:
                badParameter:
                  value: |
                    message: '{validation failure message}'
                    status: 417
        '500':
          description: Unexpected Error 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              examples:
                notWellFormed:
                  value: 
                    message: 'The markup in the document following the root element must be well-formed.'
                    status: 500
            application/xml:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              examples:
                notWellFormed:
                  value: 
                    message: 'The markup in the document following the root element must be well-formed.'
                    status: 500
            text/plain:
              schema:
                $ref: '#/components/schemas/validateMetadataResponse'
              examples:
                notWellFormed: 
                  value: |
                    message: 'The markup in the document following the root element must be well-formed.'
                    status: 500
      parameters:
        - $ref: '#/components/parameters/uuidInPath'
        - $ref: '#/components/parameters/transformValidate'
        - $ref: '#/components/parameters/format'
      x-codeSamples:
        - lang: cURL
          label: cURL 
          source: curl --cookie cookies.txt "https://data.noaa.gov/cedit/metadata/validate/{your uuid}?transform=convert-comet-to-iso19115-2"
        - lang: python
          label: python
          source: |
            import requests
            import json
            from urllib.parse import urlparse
            from sys import exit
            from os.path import exists
            
            VALIDATE_URL = "https://data.noaa.gov/cedit/metadata/validate/"
            
            # if cookie can't be found, exit
            file_exists = exists('comet_cookie.txt')
            if not file_exists:
                print("Can't find cookie, please login")
                exit(0)
            
            # Create a session and update it with your jsessionid saved in comet_cookie.txt
            session = requests.Session()
            with open('comet_cookie.txt', 'r') as f:
                cookies = requests.utils.cookiejar_from_dict(json.load(f))
                session.cookies.update(cookies)
            
            uuid = input("Enter UUID of record to validate: ")
            responseFormat = input("Enter a response format (text, json, or xml): ")
            
            PARAMS = {
                'transform': 'convert-comet-to-iso19115-2',
                'format': responseFormat
            }
            
            resp = session.get(VALIDATE_URL+uuid, params=PARAMS)
            
            domain = urlparse(resp.url).netloc
            
            if "auth" in domain:
                print("Your session expired...please login")
            else:
                print(resp.status_code)
                print(resp.text)
externalDocs:
  description: CoMET/DSMQ User Guide
  url: https://www.ncei.noaa.gov/sites/default/files/2020-04/CoMET_DMSQ%20User%20Manual%20CPFF-DSD-25%20.pdf
info:
  contact:
    name: Charles Burris
    url: data.noaa.gov/cedit
    email: charles.burris@noaa.gov
  description: |
    # Introduction
      CoMET was created by the National Centers for Environmental Information (NCEI) to be NOAA’s comprehensive and easy to use collection metadata creation and editing tool. It allows users to create ISO compliant metadata, can support NCEI collection metadata template, and is a gateway to publishing metadata to OneStop.

      # ISO
      For more information on the ISO Standard 19115-2, please visit 
      this [documentation link](https://ngdc.noaa.gov/wiki/index.php?title=About_Collection_Metadata_Editing_Tool).

      # OpenAPI Specification
      This API is documented in **OpenAPI format** and is diplayed using [ReDoc](https://github.com/Redocly/redoc). In addition to standard OpenAPI syntax, ReDoc uses a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).

      # Transformations
      Export/Read and Import endpoints support use of the transform query parameter. The following transform parameters are supported. 
      
      - **Import:** These transformations accept a document format and convert it to CoMET Format, which is stored in the database.
        - **convert-iso19115-2-to-comet** imports ISO 19115-2 XML saves as CoMET format. 
      - **Read/Export:** These transforms retrieve CoMET format metadata from the database and return a document in the response body.
        - **convert-comet-to-iso19115-2** exports ISO 19115-2 as an XML document
        - **convert-iso19115-2-to-landingPage** transforms ISO 19115-2 XML to NCEI's Landing Page as an HTML document
        - **convert-iso19115-2-to-text** transforms ISO 19115-2 XML to CoMET Format plain text as an HTML document
        - **convert-iso19115-2-to-cswRubric** transforms ISO 19115-2 to the CSW Readiness Report as an HTML document
        - **convert-iso19115-2-to-doiRubric** transforms ISO 19115-2 to the DOI Readiness Report as an HTML document
        - **convert-iso19115-2-to-components** tranforms ISO 19115-2 to a Component Analysis Report as an HTML document
      
      # Authentication
      
      Users must first establish a user session in order to create, read/view, update, or delete metadata. Sessions are established by sending login credentials via an HTTP request to the login URL. The server will create a cookie that contains an API Key (JSESSIONID) that authorizes each request. The cookie must be sent with each request and is valid so long as the session stays alive.
      
      Login Requirements:
      - Users must have a @noaa.gov email account with CoMET. 
      - User must be assigned to recordGroup they are trying to interact with programmatically. To be added to a recordGroup, email [Collection Manager Support](ncei.collection-manager.support@noaa.gov) 
        
      <SecurityDefinitions />
  title: CoMET API
  version: v2
tags:
  - name: Login
    description: Users must first establish a user session in order to create, read/view, update, or delete metadata. Sessions are established by sending login credentials via an HTTP request to the login URL. The server will create a cookie that contains an API Key (JSESSIONID) that authorizes each request. The cookie must be sent with each request and is valid so long as the session stays alive.
  - name: Metadata Operations
    description: Create, Update, Delete, and Validate Metadata
    externalDocs:
      description: CoMET/DSMQ User Manual
      url: https://ngdc.noaa.gov/wiki/index.php?title=About_Collection_Metadata_Editing_Tool
