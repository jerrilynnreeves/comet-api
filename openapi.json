{
  "security": [
    {
      "HTTPCookie": []
    }
  ],
  "components": {
    "parameters": {
      "descriptionRequired": {
        "name": "description",
        "in": "query",
        "required": true,
        "description": "Title of the record in the CoMET database",
        "schema": {
          "type": "string"
        }
      },
      "description": {
        "name": "description",
        "in": "query",
        "description": "Title of the record in the CoMET database",
        "schema": {
          "type": "string"
        }
      },
      "editState": {
        "name": "editState",
        "in": "query",
        "description": "Status of record.",
        "schema": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED",
            "PUBLISH",
            "PUBLISH_PROCESSING",
            "IN_REVIEW",
            "APPROVED",
            "UNPUBLISHED",
            "UNRESOLVED",
            "INVALID"
          ],
          "example": [
            "APPROVED"
          ]
        }
      },
      "format": {
        "name": "format",
        "in": "query",
        "description": "Response format. This parameter does not change the format of metadata documents/data. Use the transform parameter instead",
        "schema": {
          "type": "string",
          "enum": [
            "xml",
            "json",
            "text"
          ],
          "example": [
            "xml"
          ]
        }
      },
      "max": {
        "name": "max",
        "in": "query",
        "description": "Maximum number of records to return",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10000,
          "default": 5000,
          "example": [
            50
          ]
        }
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "Number of records to exclude from the responses first N items. Use with max to request a set of items. Offset is applied before the max parameter regardless of its position in the request. ",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 5000,
          "default": 1,
          "example": [
            50
          ]
        }
      },
      "recordGroupRequired": {
        "name": "recordGroup",
        "in": "query",
        "description": "The record group, which may represent a Web Accessible Folder (WAF) that contains 1 or more ISO metadata records stored in CoMET. If your record group name includes reserved, unsafe, or other characters not suppported in URLs; they will need to be encoded. For example, a record group with the name My/Record/Group/, would need to be encoded as My%2FRecord%2FGroup%2F",
        "required": true,
        "schema": {
          "type": "string",
          "example": "Comet%20Training"
        }
      },
      "since": {
        "name": "since",
        "in": "query",
        "description": "Return metadata records updated since this date. Requires yyyy-MM-dd format",
        "schema": {
          "type": "string",
          "format": "date",
          "pattern": "/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/",
          "example": "2022-01-01T00:00:00.000Z"
        }
      },
      "transformImport": {
        "name": "transform",
        "in": "query",
        "description": "Type of transformation to apply to the metadata record. Please review the section title Transformations for more detail.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "convert-iso19115-2-to-comet"
          ],
          "example": "convert-iso19115-2-to-comet"
        }
      },
      "transformExport": {
        "name": "transform",
        "in": "query",
        "description": "Type of transformation to apply to the metadata record. Please review the section title Transformations for more detail.",
        "schema": {
          "type": "string",
          "enum": [
            "convert-comet-to-iso19115-2",
            "convert-iso19115-2-to-landingPage",
            "convert-iso19115-2-to-text",
            "convert-iso19115-2-to-rubricV2",
            "convert-iso19115-2-to-cswRubric",
            "convert-iso19115-2-to-doiRubric",
            "convert-iso19115-2-to-components"
          ],
          "example": "convert-comet-to-iso19115-2"
        }
      },
      "transformValidate": {
        "name": "transform",
        "in": "query",
        "description": "Type of transformation to apply to the metadata record. Please review the section title Transformations for more detail.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "convert-comet-to-iso19115-2"
          ],
          "example": "?transform=convert-comet-to-iso19115-2"
        }
      },
      "uuid": {
        "name": "uuid",
        "in": "query",
        "description": "Universally Unique Identifier. For import, Use this query parameter if you create your own UUIDs. Otherwise, the system will generate one for you. ",
        "schema": {
          "type": "string"
        }
      },
      "uuidInPath": {
        "name": "uuid",
        "in": "path",
        "description": "Universally Unique Identifier. Use this query parameter if you create your own UUIDs. Otherwise, the system will generate one for you. ",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "credentials": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "cometFormat": {
        "type": "object",
        "description": "Standard agonsitc CoMET format. This is the format that is stored in the CoMET database.",
        "properties": {
          "formModel": {
            "type": "object",
            "properties": {
              "identification": {
                "type": "object"
              },
              "keywords": {
                "type": "object"
              },
              "coverage": {
                "type": "object"
              },
              "metadata": {
                "type": "object"
              },
              "access": {
                "type": "object"
              },
              "content": {
                "type": "object"
              },
              "history": {
                "type": "object"
              },
              "quality": {
                "type": "object"
              },
              "resources": {
                "type": "object"
              },
              "orphan": {
                "type": "object"
              },
              "dataManagementPlan": {
                "type": "object"
              },
              "dsmq": {
                "type": "object"
              }
            }
          }
        }
      },
      "iso19115-2": {
        "type": "object",
        "description": "ISO 19115-2 Standard",
        "properties": {
          "gmi:MI_Metadata": {
            "type": "object"
          }
        }
      },
      "createMetadataResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "xml": {
          "name": "createMetadataResponse",
          "wrapped": true
        }
      },
      "deleteMetadataResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "xml": {
          "name": "deleteMetadataResponse",
          "wrapped": true
        }
      },
      "exportMetaResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "xml": {
          "name": "exportMetaResponse",
          "wrapped": true
        }
      },
      "searchMetadataResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "totalCount": {
            "type": "string"
          },
          "metadata": {
            "items": {
              "type": "object",
              "properties": {
                "fileIdentifier": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "uuid": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "metadata",
                "wrapped": true
              }
            }
          }
        },
        "xml": {
          "name": "searchMetadataResponse",
          "wrapped": true
        }
      },
      "transformFailed": {
        "example": {
          "message": "Transformed Failure! {additional message}",
          "status": 400
        },
        "xml": {
          "name": "createMetadataResponse",
          "wrapped": true
        }
      },
      "updateMetadataResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "xml": {
          "name": "updateMetadataResponse",
          "wrapped": true
        }
      },
      "validateMetadataResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "xml": {
          "name": "validateMetadataResponse",
          "wrapped": true
        }
      }
    },
    "securitySchemes": {
      "HTTPCookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "JSESSIONID"
      }
    }
  },
  "servers": [
    {
      "description": "Production server URL",
      "url": "https://data.noaa.gov/cedit"
    }
  ],
  "openapi": "3.0.0",
  "paths": {
    "/login/wsLogin": {
      "post": {
        "tags": [
          "Login"
        ],
        "summary": "Login",
        "security": [],
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/credentials"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "403": {
            "description": "Bad credentials"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "# This script saves your apiKey (JSESSIONID) to a cookie file on disk. This file, cookie.txt, is sent in other examples in this documentation \n\ncurl -X 'POST' \\\n'https://data.noaa.gov/cedit/login/wsLogin' \\\n-H 'accept: */*' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-d 'username=your.username' -d 'password=yourPassword'  \\\n--cookie-jar cookies.txt\n"
          },
          {
            "lang": "python",
            "label": "python",
            "source": "import requests\nimport getpass\nimport json\n\n# Makes a persistent Session - Will save to disk\nsession = requests.Session()\n\nLOGIN_URL = \"https://data.noaa.gov/cedit/login/wsLogin\"\nusername = input(\"Enter Username: \")\npassword = getpass.getpass(prompt='Enter password: ')\n\nPARAMS = {'username': username, 'password': password}\n\nresp = session.post(LOGIN_URL, params = PARAMS)\n\nprint(resp.text)\n\n# Saves Session to disk for use in other python examples\nif resp.text == \"success\": \n    print(session.cookies)\n\n    with open('comet_cookie.txt', 'w') as f:\n        json.dump(requests.utils.dict_from_cookiejar(session.cookies), f)\nelse:\n    print(\"login failed\")\n"
          }
        ]
      }
    },
    "/metadata/import": {
      "post": {
        "tags": [
          "Metadata Operations"
        ],
        "summary": "Create/Import",
        "description": "Create or import an ISO metadata file into CoMET. The default data expect is CoMET Format XML. To import ISO 19115-2 XML use the transform query parameter.",
        "operationId": "create",
        "requestBody": {
          "description": "Accepts XML document in Comet Format XML or ISO 19915-2 XML. Default Comet Format XML. To change, use the transform parameter",
          "required": true,
          "content": {
            "application/xml": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/cometFormat"
                  },
                  {
                    "$ref": "#/components/schemas/iso19115-2"
                  }
                ]
              },
              "examples": {
                "sampleNceiTemplate": {
                  "summary": "Sample ISO 19115-2",
                  "externalValue": "https://data.noaa.gov/waf/templates/iso/xml/ncei_template-clean.xml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createMetadataResponse"
                },
                "example": {
                  "message": "success",
                  "status": 200,
                  "uuid": "1d2b290b-abe9-479b-8179-a5dd819bdf90"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/createMetadataResponse"
                },
                "example": {
                  "message": "success",
                  "status": 200,
                  "uuid": "1d2b290b-abe9-479b-8179-a5dd819bdf90"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "message: success\nstatus: 200\nuuid: 1d2b290b-abe9-479b-8179-a5dd819bdf90\n"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createMetadataResponse"
                },
                "examples": {
                  "duplicateUUID": {
                    "value": {
                      "message": "Validation error: unable to create a record: Property ... of class ... with value {supplied UUID} must be unique",
                      "status": 400,
                      "uuid": null
                    }
                  },
                  "badXML": {
                    "value": {
                      "message": "XSD validation for theInstance failed: {additional message}",
                      "status": 400,
                      "uuid": null
                    }
                  },
                  "badParameter": {
                    "value": {
                      "message": "Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}",
                      "status": 400,
                      "uuid": null
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/createMetadataResponse"
                },
                "examples": {
                  "duplicateUUID": {
                    "value": {
                      "message": "Validation error: unable to create a record: Property ... of class ... with value {supplied UUID} must be unique",
                      "status": 400,
                      "uuid": null
                    }
                  },
                  "badXML": {
                    "value": {
                      "message": "XSD validation for theInstance failed: {additional message}",
                      "status": 400,
                      "uuid": null
                    }
                  },
                  "badParameter": {
                    "value": {
                      "message": "Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}",
                      "status": 400,
                      "uuid": null
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/createMetadataResponse"
                },
                "examples": {
                  "duplicateUUID": {
                    "value": "message: 'Validation error: unable to create a record: Property ... of class ... with value {supplied UUID} must be unique'\nstatus: 400\nuuid:\n"
                  },
                  "badXML": {
                    "value": "message: 'XSD validation for theInstance failed: {additional message}'\nstatus: 400\nuuid:\n"
                  },
                  "badParameter": {
                    "value": "message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'\nstatus: 400\nuuid:              \n"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createMetadataResponse"
                },
                "examples": {
                  "transformParameterBad": {
                    "value": {
                      "message": "Unable to find view {requested transform}",
                      "status": 404,
                      "uuid": null
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/createMetadataResponse"
                },
                "examples": {
                  "transformParameterBad": {
                    "value": {
                      "message": "Unable to find view {requested transform}",
                      "status": 404,
                      "uuid": null
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/createMetadataResponse"
                },
                "examples": {
                  "transformParameterBad": {
                    "value": "message: 'Unable to find view {requested transform}'\nstatus: 404\nuuid:  \n"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createMetadataResponse"
                },
                "examples": {
                  "invalidUUID": {
                    "value": {
                      "message": "Content user provided UUID does not validate...",
                      "status": 500,
                      "uuid": null
                    }
                  },
                  "duplicateFileIdentifer": {
                    "value": {
                      "message": "Upload Error: A metadata record with this FileIdentifier already exists within CoMET. Either call the update API or change the FileIdentifier.",
                      "status": 500,
                      "uuid": null
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/createMetadataResponse"
                },
                "examples": {
                  "invalidUUID": {
                    "value": {
                      "message": "Content user provided UUID does not validate...",
                      "status": 500,
                      "uuid": null
                    }
                  },
                  "duplicateFileIdentifer": {
                    "value": {
                      "message": "Upload Error: A metadata record with this FileIdentifier already exists within CoMET. Either call the update API or change the FileIdentifier.",
                      "status": 500,
                      "uuid": null
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/createMetadataResponse"
                },
                "examples": {
                  "invalidUUID": {
                    "value": "message: 'Content user provided UUID does not validate...'\nstatus: 500\nuuid:\n"
                  },
                  "duplicateFileIdentifer": {
                    "value": "message: 'Upload Error: A metadata record with this FileIdentifier already exists within CoMET. Either call the update API or change the FileIdentifier.'\nstatus: 500\nuuid:\n"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/recordGroupRequired"
          },
          {
            "$ref": "#/components/parameters/descriptionRequired"
          },
          {
            "$ref": "#/components/parameters/transformImport"
          },
          {
            "$ref": "#/components/parameters/uuid"
          },
          {
            "$ref": "#/components/parameters/editState"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL Import ISO 19115-2",
            "source": "curl -v -X 'POST' \\\n  'https://data.noaa.gov/cedit/metadata/import?recordGroup={Your Record Group}&transform=convert-iso19115-2-to-comet&description={Your Record Name}&format=json' \\\n  -H 'accept:  */*' \\\n  -H 'Content-Type: application/xml' \\\n  -d @{Your File Name} \\\n  --cookie cookies.txt\n"
          },
          {
            "lang": "python",
            "label": "python",
            "source": "import requests\nimport json\nfrom urllib.parse import urlparse\nfrom sys import exit\nfrom os.path import exists\n\nSEARCH_URL = \"https://data.noaa.gov/cedit/metadata/search\"\n\n# if cookie can't be found, exit\nfile_exists = exists('comet_cookie.txt')\nif not file_exists:\n    print(\"Can't find cookie, please login\")\n    exit(0)\n\n# Create a session and update it with your jsessionid saved in comet_cookie.txt\nsession = requests.Session()\nwith open('comet_cookie.txt', 'r') as f:\n    cookies = requests.utils.cookiejar_from_dict(json.load(f))\n    session.cookies.update(cookies)\n\nrecordGroup = input(\"Enter Record Group Name: \")\nresponseFormat = input(\"Enter a response format (text, json, or xml): \")\n\nPARAMS = {\n    'recordGroup': recordGroup, \n    'format': responseFormat\n}\n\nresp = session.get(SEARCH_URL, params = PARAMS)\n\ndomain = urlparse(resp.url).netloc\n\nif \"auth\" in domain:\n    print(\"Your session expired...please login\")\nelse:\n    print(resp.status_code)\n    print(resp.text)\n"
          }
        ]
      }
    },
    "/metadata/{uuid}": {
      "get": {
        "tags": [
          "Metadata Operations"
        ],
        "summary": "Read/Export",
        "description": "Read/Export Metadata. The default schema returned is CoMET Format XML. To return ISO 19115-2 XML document, you must use transform query parameter. Other document and reports exports are support by using the transform parameter.",
        "operationId": "export",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/cometFormat"
                    },
                    {
                      "$ref": "#/components/schemas/iso19115-2"
                    }
                  ]
                },
                "examples": {
                  "sampleNceiTemplate": {
                    "summary": "Sample ISO 19115-2",
                    "externalValue": "https://data.noaa.gov/waf/templates/iso/xml/ncei_template-clean.xml"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "xml": {
                    "name": "exportMetaResponse",
                    "wrapped": true
                  }
                },
                "example": {
                  "message": "Transformed Failure! {additional message}",
                  "status": 400
                }
              },
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/exportMetaResponse"
                    },
                    {
                      "$ref": "#/components/schemas/transformFailed"
                    }
                  ]
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "status: 400\nmessage: Transform failure! {additional message}\n"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/xml": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/exportMetaResponse"
                    },
                    {
                      "type": "object"
                    },
                    {
                      "example": {
                        "message": "Unable to find record",
                        "status": 404
                      }
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/exportMetaResponse"
                    },
                    {
                      "type": "object"
                    },
                    {
                      "example": {
                        "message": "Unable to find record",
                        "status": 404
                      }
                    }
                  ]
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "status: 404\nmessage: Unable to find record\n"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/uuidInPath"
          },
          {
            "$ref": "#/components/parameters/transformExport"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --cookie cookies.txt \"https://data.noaa.gov/cedit/metadata/{your uuid}\" > {your fileName}.xml"
          },
          {
            "lang": "cURL",
            "label": "cURL with Transform",
            "source": "curl --cookie cookies.txt \"https://data.noaa.gov/cedit/metadata/{your uuid}?transform={your transform}\" > {your file name}"
          },
          {
            "lang": "python",
            "label": "python",
            "source": "import requests\nimport json\nfrom urllib.parse import urlparse\nfrom sys import exit\nfrom os.path import exists\n\nEXPORT_URL = \"https://data.noaa.gov/cedit/metadata/\"\n\n# if cookie can't be found, exit\nfile_exists = exists('comet_cookie.txt')\nif not file_exists:\n    print(\"Can't find cookie, please login\")\n    exit(0)\n\n# Create a session and update it with your jsessionid saved in comet_cookie.txt\nsession = requests.Session()\nwith open('comet_cookie.txt', 'r') as f:\n    cookies = requests.utils.cookiejar_from_dict(json.load(f))\n    session.cookies.update(cookies)\n\nuuid = input(\"Enter UUID of record to export: \")\nfilename = input(\"Save file with this name: \")\n\nPARAMS = {\n    'transform': 'convert-comet-to-iso19115-2',\n    'format': \"json\"\n}\n\nresp = session.get(EXPORT_URL+uuid, params=PARAMS)\n\ndomain = urlparse(resp.url).netloc\n\nif \"auth\" in domain:\n    print(\"Your session expired...please login\")\nelse:\n    print(resp.status_code)\n    if resp.status_code == 200:\n        with open(filename, 'wb') as f:\n            f.write(resp.content)\n    else:\n        print(resp.text)\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Metadata Operations"
        ],
        "summary": "Delete",
        "security": [
          {
            "HTTPCookie": []
          }
        ],
        "description": "Delete Metadata record",
        "operationId": "delete",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteMetadataResponse"
                },
                "example": {
                  "message": "success",
                  "status": 200
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/deleteMetadataResponse"
                },
                "example": {
                  "message": "success",
                  "status": 200
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "status: 200\nmessage: success\n"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/deleteMetadataResponse"
                    },
                    {
                      "type": "object"
                    },
                    {
                      "example": {
                        "message": "Unable to find record",
                        "status": 404
                      }
                    }
                  ]
                }
              },
              "application/xml": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/deleteMetadataResponse"
                    },
                    {
                      "type": "object"
                    },
                    {
                      "example": {
                        "message": "Unable to find record",
                        "status": 404
                      }
                    }
                  ]
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "status: 404\nmessage: Unable to find record\n"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/uuidInPath"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --cookie cookies.txt -X DELETE \"https://data.noaa.gov/cedit/metadata/{your uuid}\""
          },
          {
            "lang": "python",
            "label": "python",
            "source": "import requests\nimport json\nfrom urllib.parse import urlparse\nfrom sys import exit\nfrom os.path import exists\n\nDELETE_URL = \"https://data.noaa.gov/cedit/metadata/\"\n\n# if cookie can't be found, exit\nfile_exists = exists('comet_cookie.txt')\nif not file_exists:\n    print(\"Can't find cookie, please login\")\n    exit(0)\n\n# Create a session and update it with your jsessionid saved in comet_cookie.txt\nsession = requests.Session()\nwith open('comet_cookie.txt', 'r') as f:\n    cookies = requests.utils.cookiejar_from_dict(json.load(f))\n    session.cookies.update(cookies)\n\nuuid = input(\"Enter UUID of record to delete: \")\nresponseFormat = input(\"Enter a response format (text, json, or xml): \")\n\nPARAMS = {\n    'format': responseFormat\n}\n\nresp = session.delete(DELETE_URL+uuid, params=PARAMS)\n\ndomain = urlparse(resp.url).netloc\n\nif \"auth\" in domain:\n    print(\"Your session expired...please login\")\nelse:\n    print(resp.status_code)\n    print(resp.text)\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Metadata Operations"
        ],
        "summary": "Update",
        "security": [
          {
            "HTTPCookie": []
          }
        ],
        "description": "",
        "operationId": "update",
        "requestBody": {
          "description": "Accepts XML document in Comet Format XML or ISO 19915-2 XML. Default Comet Format XML. To change, use the transform parameter",
          "required": true,
          "content": {
            "application/xml": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/cometFormat"
                  },
                  {
                    "$ref": "#/components/schemas/iso19115-2"
                  }
                ]
              },
              "examples": {
                "sampleNceiTemplate": {
                  "summary": "Sample ISO 19115-2",
                  "externalValue": "https://data.noaa.gov/waf/templates/iso/xml/ncei_template-clean.xml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updateMetadataResponse"
                },
                "example": {
                  "message": "success",
                  "status": 200,
                  "uuid": "1d2b290b-abe9-479b-8179-a5dd819bdf90"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/updateMetadataResponse"
                },
                "example": {
                  "message": "success",
                  "status": 200,
                  "uuid": "1d2b290b-abe9-479b-8179-a5dd819bdf90"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "message: success\nstatus: 200\nuuid: 1d2b290b-abe9-479b-8179-a5dd819bdf90\n"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updateMetadataResponse"
                },
                "examples": {
                  "noFileSent": {
                    "value": {
                      "message": "{additional message} Premature end of file.",
                      "status": 400,
                      "uuid": "cc9efa76-b2ba-4810-8052-2337abdf6c09"
                    }
                  },
                  "badXML": {
                    "value": {
                      "message": "XSD validation for theInstance failed: {additional message}",
                      "status": 400,
                      "uuid": "cc9efa76-b2ba-4810-8052-2337abdf6c09"
                    }
                  },
                  "badParameter": {
                    "value": {
                      "message": "Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}",
                      "status": 400,
                      "uuid": "cc9efa76-b2ba-4810-8052-2337abdf6c09"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/createMetadataResponse"
                },
                "examples": {
                  "noFileSent": {
                    "value": {
                      "message": "{additional message} Premature end of file.",
                      "status": 400,
                      "uuid": "cc9efa76-b2ba-4810-8052-2337abdf6c09"
                    }
                  },
                  "badXML": {
                    "value": {
                      "message": "XSD validation for theInstance failed: {additional message}",
                      "status": 400,
                      "uuid": "cc9efa76-b2ba-4810-8052-2337abdf6c09"
                    }
                  },
                  "badParameter": {
                    "value": {
                      "message": "Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}",
                      "status": 400,
                      "uuid": "cc9efa76-b2ba-4810-8052-2337abdf6c09"
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/createMetadataResponse"
                },
                "examples": {
                  "noFileSent": {
                    "value": "message: '{additional message} Premature end of file.'\nstatus: 400\nuuid: cc9efa76-b2ba-4810-8052-2337abdf6c09\n"
                  },
                  "badXML": {
                    "value": "message: 'XSD validation for theInstance failed: {additional message}'\nstatus: 400\nuuid: cc9efa76-b2ba-4810-8052-2337abdf6c09\n"
                  },
                  "badParameter": {
                    "value": "message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'\nstatus: 400\nuuid: cc9efa76-b2ba-4810-8052-2337abdf6c09\n"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updateMetadataResponse"
                },
                "examples": {
                  "transformParameterBad": {
                    "value": {
                      "message": "Unable to find view {requested transform}",
                      "status": 404,
                      "uuid": "cc9efa76-b2ba-4810-8052-2337abdf6c09"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/updateMetadataResponse"
                },
                "examples": {
                  "transformParameterBad": {
                    "value": {
                      "message": "Unable to find view {requested transform}",
                      "status": 404,
                      "uuid": "cc9efa76-b2ba-4810-8052-2337abdf6c09"
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/updateMetadataResponse"
                },
                "examples": {
                  "transformParameterBad": {
                    "value": "message: 'Unable to find view {requested transform}'\nstatus: 404\nuuid: cc9efa76-b2ba-4810-8052-2337abdf6c09\n"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/uuidInPath"
          },
          {
            "$ref": "#/components/parameters/description"
          },
          {
            "$ref": "#/components/parameters/transformImport"
          },
          {
            "$ref": "#/components/parameters/editState"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL Update ISO 19115-2",
            "source": "curl -X 'PUT' \\\n  'https://data.noaa.gov/cedit/metadata/{your uuid}?transform=convert-iso19115-2-to-comet&format=json' \\\n  -H \"Content-Type: application/xml\" \\\n  -d @{your file} \\\n  -H 'accept: */*' \\\n  --cookie cookies.txt\n"
          },
          {
            "lang": "cURL",
            "label": "cURL APPROVE/Publish Record",
            "source": "curl -X 'PUT' \\\n  'https://data.noaa.gov/cedit/metadata/{your uuid}?transform=convert-iso19115-2-to-comet&editState=APPROVE&format=json' \\\n  -H \"Content-Type: application/xml\" \\\n  -d @{your file} \\\n  -H 'accept: */*' \\\n  --cookie cookies.txt\n"
          },
          {
            "lang": "python",
            "label": "python",
            "source": "import requests\nimport json\nfrom urllib.parse import urlparse\nfrom sys import exit\nfrom os.path import exists\n\nUPDATE_URL = \"https://data.noaa.gov/cedit/metadata/\"\n\n# if cookie can't be found, exit\nfile_exists = exists('comet_cookie.txt')\nif not file_exists:\n    print(\"Can't find cookie, please login\")\n    exit(0)\n\nfilename = input(\"Enter the filename (including path if located in a different directory): \")\n\n# if the file cannot be found, exit\nfile_exists = exists(filename)\nif not file_exists:\n    print(\"Could not locate the file\")\n    exit(0)\n\n# Create a session and update it with your jsessionid saved in comet_cookie.txt\nsession = requests.Session()\nwith open('comet_cookie.txt', 'r') as f:\n    cookies = requests.utils.cookiejar_from_dict(json.load(f))\n    session.cookies.update(cookies)\n\nuuid = input(\"Enter UUID of record to update: \")\neditState = input(\"Enter an edit state (DRAFT and APPROVED are common examples): \")\nresponseFormat = input(\"Enter a response format (text, json, or xml): \")\n\nPARAMS = {\n    'transform': 'convert-iso19115-2-to-comet',\n    'editState':  editState,\n    'format': responseFormat\n}\n\nheaders = {'Content-Type': 'application/xml'}\n\nwith open(filename, 'rb') as f:\n    resp = session.put(UPDATE_URL+uuid, headers=headers, params=PARAMS, data = f)\n    \ndomain = urlparse(resp.url).netloc\n\nif \"auth\" in domain:\n    print(\"Your session expired...please login\")\nelse:\n    print(resp.status_code)\n    print(resp.text)\n"
          }
        ]
      }
    },
    "/metadata/search": {
      "get": {
        "tags": [
          "Metadata Operations"
        ],
        "summary": "Search",
        "security": [
          {
            "HTTPCookie": []
          }
        ],
        "description": "",
        "operationId": "search",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchMetadataResponse"
                },
                "example": {
                  "message": "success",
                  "status": 200,
                  "totalCount": 20,
                  "metadata": [
                    {
                      "fileIdentifer": "gov.noaa.ncei:example_1",
                      "name": "Example_1",
                      "uuid": "1aa2ac5c-bbff-4036-98fd-c477bf9c295b"
                    },
                    {
                      "fileIdentifer": "gov.noaa.ncei:example_2",
                      "name": "Example_2",
                      "uuid": "f0ba7fe9-0e9b-445b-b5d3-897b50aef656"
                    }
                  ]
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/searchMetadataResponse"
                },
                "example": {
                  "message": "success",
                  "status": 200,
                  "totalCount": 20,
                  "metadata": [
                    {
                      "fileIdentifer": "gov.noaa.ncei:example_1",
                      "name": "Example_1",
                      "uuid": "1aa2ac5c-bbff-4036-98fd-c477bf9c295b"
                    },
                    {
                      "fileIdentifer": "gov.noaa.ncei:example_2",
                      "name": "Example_2",
                      "uuid": "f0ba7fe9-0e9b-445b-b5d3-897b50aef656"
                    }
                  ]
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "message: success\nstatus: 200\ntotalCount: 20\n"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchMetadataResponse"
                },
                "examples": {
                  "missingRecordGroup": {
                    "value": {
                      "message": "Validation of request failed: Property [recordGroup] of class ... cannot be null",
                      "status": 400,
                      "totalCount": 0
                    }
                  },
                  "badParameter": {
                    "value": {
                      "message": "Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}",
                      "status": 400,
                      "totalCount": 0
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/searchMetadataResponse"
                },
                "examples": {
                  "missingRecordGroup": {
                    "value": {
                      "message": "Validation of request failed: Property [recordGroup] of class ... cannot be null",
                      "status": 400,
                      "totalCount": 0
                    }
                  },
                  "badParameter": {
                    "value": {
                      "message": "Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}",
                      "status": 400,
                      "totalCount": 0
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/searchMetadataResponse"
                },
                "examples": {
                  "missingRecordGroup": {
                    "value": "message: 'Validation of request failed: Property [recordGroup] of class ... cannot be null'\nstatus: 400\ntotalCount: 0\n"
                  },
                  "badParameter": {
                    "value": "message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'\nstatus: 400\ntotalCount: 0         \n"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchMetadataResponse"
                },
                "examples": {
                  "recordGroupNotFound": {
                    "value": {
                      "message": "Could not find record group",
                      "status": 404,
                      "totalCount": 0
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/searchMetadataResponse"
                },
                "examples": {
                  "recordGroupNotFound": {
                    "value": {
                      "message": "Could not find record group",
                      "status": 404,
                      "totalCount": 0
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/searchMetadataResponse"
                },
                "examples": {
                  "recordGroupNotFound": {
                    "value": "message: 'Could not find record group'\nstatus: 404\ntotalCount: 0             \n"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchMetadataResponse"
                },
                "examples": {
                  "badURLConstruction": {
                    "value": {
                      "message": "For input string: {error message}",
                      "status": 500,
                      "totalCount": 0
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/searchMetadataResponse"
                },
                "examples": {
                  "badURLConstruction": {
                    "value": {
                      "message": "For input string: {error message}",
                      "status": 500,
                      "totalCount": 0
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/searchMetadataResponse"
                },
                "examples": {
                  "badURLConstruction": {
                    "value": "message: 'For input string: {error message}'\nstatus: 500\ntotalCount: 0\n"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/recordGroupRequired"
          },
          {
            "$ref": "#/components/parameters/editState"
          },
          {
            "$ref": "#/components/parameters/format"
          },
          {
            "$ref": "#/components/parameters/max"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/since"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl -G \"https://data.noaa.gov/cedit/metadata/search?format=json\"  \\\n  --data-urlencode \"recordGroup={your record group}\" \\\n  --cookie cookies.txt \n"
          },
          {
            "lang": "cURL",
            "label": "cURL with Encoded Vars",
            "source": "var1=` echo -ne '{Your Record Group}' | xxd -plain | tr -d '\\n' | sed 's/\\(..\\)/%\\1/g'`;echo $enc\nvar2=` echo -ne '{Title of Record}' | xxd -plain | tr -d '\\n' | sed 's/\\(..\\)/%\\1/g'`;echo $enc\ncurl -X 'POST' \\\n  'https://data.noaa.gov/cedit/metadata/import?transform=convert-iso19115-2-to-comet&description=TEST_IMPORT&format=json&recordGroup='$var1'&otherVar='$var2 \\\n  -H 'Content-Type: application/xml' \\\n  --data-binary @import-test.xml \\\n  --cookie cookies.txt\n"
          },
          {
            "lang": "python",
            "label": "python",
            "source": "import requests\nimport json\nfrom urllib.parse import urlparse\nfrom sys import exit\nfrom os.path import exists\n\nSEARCH_URL = \"https://data.noaa.gov/cedit/metadata/search\"\n\n# if cookie can't be found, exit\nfile_exists = exists('comet_cookie.txt')\nif not file_exists:\n    print(\"Can't find cookie, please login\")\n    exit(0)\n\n# Create a session and update it with your jsessionid saved in comet_cookie.txt\nsession = requests.Session()\nwith open('comet_cookie.txt', 'r') as f:\n    cookies = requests.utils.cookiejar_from_dict(json.load(f))\n    session.cookies.update(cookies)\n\nrecordGroup = input(\"Enter Record Group Name: \")\nresponseFormat = input(\"Enter a response format (text, json, or xml): \")\n\nPARAMS = {\n    'recordGroup': recordGroup, \n    'format': responseFormat\n}\n\nresp = session.get(SEARCH_URL, params = PARAMS)\n\ndomain = urlparse(resp.url).netloc\n\nif \"auth\" in domain:\n    print(\"Your session expired...please login\")\nelse:\n    print(resp.status_code)\n    print(resp.text)\n"
          }
        ]
      }
    },
    "/metadata/validate/{uuid}": {
      "get": {
        "tags": [
          "Metadata Operations"
        ],
        "summary": "Validate",
        "description": "Requires the transform parameter set to convert-comet-to-iso19115-2 to validate a record. (?transform=convert-comet-to-iso19115-2). Other transforms will return an error.",
        "security": [
          {
            "HTTPCookie": []
          }
        ],
        "operationId": "validate",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "example": {
                  "message": "success",
                  "status": 200
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "example": {
                  "message": "success",
                  "status": 200
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "status: 200\nmessage: success\n"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "examples": {
                  "badParameter": {
                    "value": {
                      "message": "Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}",
                      "status": 400
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "examples": {
                  "badParameter": {
                    "value": {
                      "message": "Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}",
                      "status": 400
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "examples": {
                  "badParameter": {
                    "value": "message: 'Validation of request failed: Property {parameter name} of class ... with value {value sent} {additional response message}'\nstatus: 400\n"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "examples": {
                  "cantFindRecord": {
                    "value": {
                      "message": "Unable to find record",
                      "status": 404
                    }
                  },
                  "noXSD": {
                    "value": {
                      "message": "No XSD location found in the XML document.",
                      "status": 404
                    }
                  },
                  "transformParameterBad": {
                    "value": {
                      "message": "Unable to find view {requested transform}",
                      "status": 404
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "examples": {
                  "cantFindRecord": {
                    "value": {
                      "message": "Unable to find record",
                      "status": 404
                    }
                  },
                  "noXSD": {
                    "value": {
                      "message": "No XSD location found in the XML document.",
                      "status": 404
                    }
                  },
                  "transformParameterBad": {
                    "value": {
                      "message": "Unable to find view {requested transform}",
                      "status": 404
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "examples": {
                  "cantFindRecord": {
                    "value": "message: 'Unable to find record'\nstatus: 404\n"
                  },
                  "noXSD": {
                    "value": "message: 'No XSD location found in the XML document.'\nstatus: 404\n"
                  },
                  "transformParameterBad": {
                    "value": "message: 'Unable to find view {requested transform}'\nstatus: 404\n"
                  }
                }
              }
            }
          },
          "417": {
            "description": "Expectation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "examples": {
                  "validationFailed": {
                    "value": {
                      "message": "{validation failure message}",
                      "status": 417
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "examples": {
                  "badParameter": {
                    "value": {
                      "message": "{validation failure message}",
                      "status": 417
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "examples": {
                  "badParameter": {
                    "value": "message: '{validation failure message}'\nstatus: 417\n"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "examples": {
                  "notWellFormed": {
                    "value": {
                      "message": "The markup in the document following the root element must be well-formed.",
                      "status": 500
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "examples": {
                  "notWellFormed": {
                    "value": {
                      "message": "The markup in the document following the root element must be well-formed.",
                      "status": 500
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/validateMetadataResponse"
                },
                "examples": {
                  "notWellFormed": {
                    "value": "message: 'The markup in the document following the root element must be well-formed.'\nstatus: 500\n"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/uuidInPath"
          },
          {
            "$ref": "#/components/parameters/transformValidate"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --cookie cookies.txt \"https://data.noaa.gov/cedit/metadata/validate/{your uuid}?transform=convert-comet-to-iso19115-2\""
          },
          {
            "lang": "python",
            "label": "python",
            "source": "import requests\nimport json\nfrom urllib.parse import urlparse\nfrom sys import exit\nfrom os.path import exists\n\nVALIDATE_URL = \"https://data.noaa.gov/cedit/metadata/validate/\"\n\n# if cookie can't be found, exit\nfile_exists = exists('comet_cookie.txt')\nif not file_exists:\n    print(\"Can't find cookie, please login\")\n    exit(0)\n\n# Create a session and update it with your jsessionid saved in comet_cookie.txt\nsession = requests.Session()\nwith open('comet_cookie.txt', 'r') as f:\n    cookies = requests.utils.cookiejar_from_dict(json.load(f))\n    session.cookies.update(cookies)\n\nuuid = input(\"Enter UUID of record to validate: \")\nresponseFormat = input(\"Enter a response format (text, json, or xml): \")\n\nPARAMS = {\n    'transform': 'convert-comet-to-iso19115-2',\n    'format': responseFormat\n}\n\nresp = session.get(VALIDATE_URL+uuid, params=PARAMS)\n\ndomain = urlparse(resp.url).netloc\n\nif \"auth\" in domain:\n    print(\"Your session expired...please login\")\nelse:\n    print(resp.status_code)\n    print(resp.text)\n"
          }
        ]
      }
    }
  },
  "externalDocs": {
    "description": "CoMET/DSMQ User Guide",
    "url": "https://www.ncei.noaa.gov/sites/default/files/2020-04/CoMET_DMSQ%20User%20Manual%20CPFF-DSD-25%20.pdf"
  },
  "info": {
    "contact": {
      "name": "Charles Burris",
      "url": "data.noaa.gov/cedit",
      "email": "charles.burris@noaa.gov"
    },
    "description": "# Introduction\n  CoMET was created by the National Centers for Environmental Information (NCEI) to be NOAA’s comprehensive and easy to use collection metadata creation and editing tool. It allows users to create ISO compliant metadata, can support NCEI collection metadata template, and is a gateway to publishing metadata to OneStop.\n\n  # ISO\n  For more information on the ISO Standard 19115-2, please visit \n  this [documentation link](https://ngdc.noaa.gov/wiki/index.php?title=About_Collection_Metadata_Editing_Tool).\n\n  # OpenAPI Specification\n  This API is documented in **OpenAPI format** and is diplayed using [ReDoc](https://github.com/Redocly/redoc). In addition to standard OpenAPI syntax, ReDoc uses a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n  # Transformations\n  Export/Read and Import endpoints support use of the transform query parameter. The following transform parameters are supported. \n  \n  - **Import:** These transformations accept a document format and convert it to CoMET Format, which is stored in the database.\n    - **convert-iso19115-2-to-comet** imports ISO 19115-2 XML saves as CoMET format. \n  - **Read/Export:** These transforms retrieve CoMET format metadata from the database and return a document in the response body.\n    - **convert-comet-to-iso19115-2** exports ISO 19115-2 as an XML document\n    - **convert-iso19115-2-to-landingPage** transforms ISO 19115-2 XML to NCEI's Landing Page as an HTML document\n    - **convert-iso19115-2-to-text** transforms ISO 19115-2 XML to CoMET Format plain text as an HTML document\n    - **convert-iso19115-2-to-cswRubric** transforms ISO 19115-2 to the CSW Readiness Report as an HTML document\n    - **convert-iso19115-2-to-doiRubric** transforms ISO 19115-2 to the DOI Readiness Report as an HTML document\n    - **convert-iso19115-2-to-components** tranforms ISO 19115-2 to a Component Analysis Report as an HTML document\n  \n  # Authentication\n  \n  Users must first establish a user session in order to create, read/view, update, or delete metadata. Sessions are established by sending login credentials via an HTTP request to the login URL. The server will create a cookie that contains an API Key (JSESSIONID) that authorizes each request. The cookie must be sent with each request and is valid so long as the session stays alive.\n  \n  Login Requirements:\n  - Users must have a @noaa.gov email account with CoMET. \n  - User must be assigned to recordGroup they are trying to interact with programmatically. To be added to a recordGroup, email [Collection Manager Support](ncei.collection-manager.support@noaa.gov) \n    \n  <SecurityDefinitions />\n",
    "title": "CoMET API",
    "version": "v2"
  },
  "tags": [
    {
      "name": "Login",
      "description": "Users must first establish a user session in order to create, read/view, update, or delete metadata. Sessions are established by sending login credentials via an HTTP request to the login URL. The server will create a cookie that contains an API Key (JSESSIONID) that authorizes each request. The cookie must be sent with each request and is valid so long as the session stays alive."
    },
    {
      "name": "Metadata Operations",
      "description": "Create, Update, Delete, and Validate Metadata",
      "externalDocs": {
        "description": "CoMET/DSMQ User Manual",
        "url": "https://ngdc.noaa.gov/wiki/index.php?title=About_Collection_Metadata_Editing_Tool"
      }
    }
  ]
}